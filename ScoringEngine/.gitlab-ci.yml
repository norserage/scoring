stages:
  - build
  - build-manifest
  - deploy

variables:
  CI_REGISTRY_HOST: 'registry.gitsoul.net'
  CI_REGISTRY_IMAGE: '$CI_REGISTRY_HOST/norserage/scoring'

dev_amd64_docker_build:
  stage: build
  except:
    - master
  before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY_HOST
  script:
    - printenv
    - chmod 775 ScoringEngine/runner.sh
    - find ScoringEngine/ScoringEngine -type f -exec chmod 664 {} \;
    - find ScoringEngine/ScoringEngine -type d -exec chmod 775 {} \;
    - docker build --pull --build-arg BUILD=$CI_JOB_ID --build-arg BRANCH=$CI_COMMIT_REF_NAME -t "$CI_REGISTRY_IMAGE/web:$CI_COMMIT_REF_NAME-amd64" -f ScoringEngine/Dockerfile-web .
    - docker build --pull --build-arg BUILD=$CI_JOB_ID --build-arg BRANCH=$CI_COMMIT_REF_NAME -t "$CI_REGISTRY_IMAGE/score:$CI_COMMIT_REF_NAME-amd64" -f ScoringEngine/Dockerfile-score .
    - docker push "$CI_REGISTRY_IMAGE/web:$CI_COMMIT_REF_NAME-amd64"
    - docker push "$CI_REGISTRY_IMAGE/score:$CI_COMMIT_REF_NAME-amd64"
  tags:
    - docker-build-amd64

dev_arm64_docker_build:
  stage: build
  except:
    - master
  before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY_HOST
  script:
    - printenv
    - chmod 775 ScoringEngine/runner.sh
    - find ScoringEngine/ScoringEngine -type f -exec chmod 664 {} \;
    - find ScoringEngine/ScoringEngine -type d -exec chmod 775 {} \;
    - docker build --pull --build-arg BUILD=$CI_JOB_ID --build-arg BRANCH=$CI_COMMIT_REF_NAME -t "$CI_REGISTRY_IMAGE/web:$CI_COMMIT_REF_NAME-arm64" -f ScoringEngine/Dockerfile-web .
    - docker build --pull --build-arg BUILD=$CI_JOB_ID --build-arg BRANCH=$CI_COMMIT_REF_NAME -t "$CI_REGISTRY_IMAGE/score:$CI_COMMIT_REF_NAME-arm64" -f ScoringEngine/Dockerfile-score .
    - docker push "$CI_REGISTRY_IMAGE/web:$CI_COMMIT_REF_NAME-arm64"
    - docker push "$CI_REGISTRY_IMAGE/score:$CI_COMMIT_REF_NAME-arm64"
  tags:
    - docker-build-arm64

dev_manifest_docker_build:
  stage: build-manifest
  except:
    - master
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY_HOST
  script:
    - docker manifest create $CI_REGISTRY_IMAGE/web:$CI_COMMIT_REF_NAME $CI_REGISTRY_IMAGE/web:$CI_COMMIT_REF_NAME-amd64 $CI_REGISTRY_IMAGE/web:$CI_COMMIT_REF_NAME-arm64
    - docker manifest create $CI_REGISTRY_IMAGE/score:$CI_COMMIT_REF_NAME $CI_REGISTRY_IMAGE/score:$CI_COMMIT_REF_NAME-amd64 $CI_REGISTRY_IMAGE/score:$CI_COMMIT_REF_NAME-arm64
    - docker push "$CI_REGISTRY_IMAGE/web:$CI_COMMIT_REF_NAME"
    - docker push "$CI_REGISTRY_IMAGE/score:$CI_COMMIT_REF_NAME"
  tags:
    - docker-build

release_amd64_docker_build:
  stage: build
  only:
    - master
  before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY_HOST
  script:
    - chmod 775 ScoringEngine/runner.sh
    - find ScoringEngine/ScoringEngine -type f -exec chmod 664 {} \;
    - find ScoringEngine/ScoringEngine -type d -exec chmod 775 {} \;
    - docker build --pull --build-arg BUILD=$CI_JOB_ID --build-arg BRANCH=$CI_COMMIT_REF_NAME -t "$CI_REGISTRY_IMAGE/web:amd64" -f ScoringEngine/Dockerfile-web .
    - docker build --pull --build-arg BUILD=$CI_JOB_ID --build-arg BRANCH=$CI_COMMIT_REF_NAME -t "$CI_REGISTRY_IMAGE/score:amd64" -f ScoringEngine/Dockerfile-score .
    - docker push "$CI_REGISTRY_IMAGE/web:amd64"
    - docker push "$CI_REGISTRY_IMAGE/score:amd64"
  tags:
    - docker-build

release_arm64_docker_build:
  stage: build
  only:
    - master
  before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY_HOST
  script:
    - chmod 775 ScoringEngine/runner.sh
    - find ScoringEngine/ScoringEngine -type f -exec chmod 664 {} \;
    - find ScoringEngine/ScoringEngine -type d -exec chmod 775 {} \;
    - docker build --pull --build-arg BUILD=$CI_JOB_ID --build-arg BRANCH=$CI_COMMIT_REF_NAME -t "$CI_REGISTRY_IMAGE/web:arm64" -f ScoringEngine/Dockerfile-web .
    - docker build --pull --build-arg BUILD=$CI_JOB_ID --build-arg BRANCH=$CI_COMMIT_REF_NAME -t "$CI_REGISTRY_IMAGE/score:arm64" -f ScoringEngine/Dockerfile-score .
    - docker push "$CI_REGISTRY_IMAGE/web:arm64"
    - docker push "$CI_REGISTRY_IMAGE/score:arm64"
  tags:
    - docker-build

release_manifest_docker_build:
  stage: build-manifest
  only:
    - master
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY_HOST
  script:
    - docker manifest create $CI_REGISTRY_IMAGE/web $CI_REGISTRY_IMAGE/web:amd64 $CI_REGISTRY_IMAGE/web:arm64
    - docker manifest create $CI_REGISTRY_IMAGE/score $CI_REGISTRY_IMAGE/score:amd64 $CI_REGISTRY_IMAGE/score:arm64
    - docker push "$CI_REGISTRY_IMAGE/web"
    - docker push "$CI_REGISTRY_IMAGE/score"
  tags:
    - docker-build

dev_deploy:
  stage: deploy
  only:
    - dev
  image: thebmw/deployer
  script:
    - sshpass -p "${DEV_SERVER_PASS}" ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no ${DEV_SERVER_USER}@${DEV_SERVER_HOST} sudo /opt/deploy_ise_dev.sh
  environment:
    name: dev
    url: https://dev.ise.thebmw.tech
  tags:
    - linux
    - docker
  variables:
    GIT_STRATEGY: none

dev_prod_deploy:
  stage: deploy
  only:
    - dev
  when: manual
  image: thebmw/deployer
  script:
    - sshpass -p "${PROD_SERVER_PASS}" ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no ${PROD_SERVER_USER}@${PROD_SERVER_HOST} sudo /opt/deploy_ise_prod.sh dev
  environment:
    name: prod
    url: https://ise.norserage.com
  tags:
    - linux
    - docker
  variables:
    GIT_STRATEGY: none

bug_deploy:
  stage: deploy
  only:
    - /^NS-[0-9]+$/
  image: thebmw/deployer
  script:
    - sshpass -p "${DEV_SERVER_PASS}" ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no ${DEV_SERVER_USER}@${DEV_SERVER_HOST} sudo /opt/deploy_ise.sh "$CI_COMMIT_REF_NAME" "$CI_ENVIRONMENT_SLUG"
  environment:
    name: bug/$CI_COMMIT_REF_NAME
    url: https://$CI_ENVIRONMENT_SLUG.ise.thebmw.tech
    on_stop: bug_deploy_stop
  tags:
    - linux
    - docker
  variables:
    GIT_STRATEGY: none

bug_deploy_stop:
  stage: deploy
  only:
    - /^NS-[0-9]+$/
  image: thebmw/deployer
  when: manual
  script:
    - sshpass -p "${DEV_SERVER_PASS}" ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no ${DEV_SERVER_USER}@${DEV_SERVER_HOST} sudo /opt/remove_ise.sh "$CI_ENVIRONMENT_SLUG"
  environment:
    name: bug/$CI_COMMIT_REF_NAME
    action: stop
  tags:
    - linux
    - docker
  variables:
    GIT_STRATEGY: none

prod_deploy:
  stage: deploy
  only:
    - master
  image: thebmw/deployer
  script:
    - sshpass -p "${PROD_SERVER_PASS}" ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no ${PROD_SERVER_USER}@${PROD_SERVER_HOST} sudo /opt/deploy_ise_prod.sh latest
  environment:
    name: prod
    url: https://ise.norserage.com
  tags:
    - linux
    - docker
  variables:
    GIT_STRATEGY: none